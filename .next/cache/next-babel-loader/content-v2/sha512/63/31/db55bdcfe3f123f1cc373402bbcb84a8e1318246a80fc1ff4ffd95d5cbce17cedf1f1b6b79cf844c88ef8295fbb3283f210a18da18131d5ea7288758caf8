{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst useScript = (id, url) => {\n  const {\n    0: status,\n    1: setStatus\n  } = useState(url ? \"loading\" : \"idle\");\n  useEffect(() => {\n    if (!url) {\n      setStatus(\"idle\");\n      return;\n    }\n\n    let script = document.querySelector(`script[src=\"${url}\"]`);\n\n    if (!script) {\n      script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.id = id;\n      script.src = url;\n      script.async = true;\n      script.setAttribute(\"data-status\", \"loading\");\n      document.body.appendChild(script);\n\n      const setAttributeFromEvent = event => {\n        script.setAttribute(\"data-status\", event.type === \"load\" ? \"ready\" : \"error\");\n      };\n\n      script.addEventListener(\"load\", setAttributeFromEvent);\n      script.addEventListener(\"error\", setAttributeFromEvent);\n    } else {\n      setStatus(script.getAttribute(\"data-status\"));\n    }\n\n    const setStateFromEvent = event => {\n      setStatus(event.type === \"load\" ? \"ready\" : \"error\");\n    };\n\n    script.addEventListener(\"load\", setStateFromEvent);\n    script.addEventListener(\"error\", setStateFromEvent);\n    return () => {\n      if (script) {\n        script.removeEventListener(\"load\", setStateFromEvent);\n        script.removeEventListener(\"error\", setStateFromEvent);\n      }\n    };\n  }, [url]);\n  return status;\n};\n\nexport default useScript;","map":{"version":3,"sources":["/home/scordero/Projects/lolo-landing-page/hooks/useScript.js"],"names":["useState","useEffect","useScript","id","url","status","setStatus","script","document","querySelector","createElement","type","src","async","setAttribute","body","appendChild","setAttributeFromEvent","event","addEventListener","getAttribute","setStateFromEvent","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,SAAS,GAAG,CAACC,EAAD,EAAKC,GAAL,KAAa;AAC7B,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBN,QAAQ,CAACI,GAAG,GAAG,SAAH,GAAe,MAAnB,CAApC;AAEAH,EAAAA,SAAS,CACP,MAAM;AACJ,QAAG,CAACG,GAAJ,EAAS;AACPE,MAAAA,SAAS,CAAC,MAAD,CAAT;AACA;AACD;;AAED,QAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAwB,eAAcL,GAAI,IAA1C,CAAb;;AACA,QAAG,CAACG,MAAJ,EAAY;AACVA,MAAAA,MAAM,GAAGC,QAAQ,CAACE,aAAT,CAAuB,QAAvB,CAAT;AACAH,MAAAA,MAAM,CAACI,IAAP,GAAc,iBAAd;AACAJ,MAAAA,MAAM,CAACJ,EAAP,GAAYA,EAAZ;AACAI,MAAAA,MAAM,CAACK,GAAP,GAAaR,GAAb;AACAG,MAAAA,MAAM,CAACM,KAAP,GAAe,IAAf;AACAN,MAAAA,MAAM,CAACO,YAAP,CAAoB,aAApB,EAAmC,SAAnC;AACAN,MAAAA,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA0BT,MAA1B;;AAEA,YAAMU,qBAAqB,GAAIC,KAAD,IAAW;AACvCX,QAAAA,MAAM,CAACO,YAAP,CAAoB,aAApB,EAAmCI,KAAK,CAACP,IAAN,KAAe,MAAf,GAAwB,OAAxB,GAAkC,OAArE;AACD,OAFD;;AAIAJ,MAAAA,MAAM,CAACY,gBAAP,CAAwB,MAAxB,EAAgCF,qBAAhC;AACAV,MAAAA,MAAM,CAACY,gBAAP,CAAwB,OAAxB,EAAiCF,qBAAjC;AACD,KAfD,MAeO;AACLX,MAAAA,SAAS,CAACC,MAAM,CAACa,YAAP,CAAoB,aAApB,CAAD,CAAT;AACD;;AAED,UAAMC,iBAAiB,GAAIH,KAAD,IAAW;AACnCZ,MAAAA,SAAS,CAACY,KAAK,CAACP,IAAN,KAAe,MAAf,GAAwB,OAAxB,GAAkC,OAAnC,CAAT;AACD,KAFD;;AAIAJ,IAAAA,MAAM,CAACY,gBAAP,CAAwB,MAAxB,EAAgCE,iBAAhC;AACAd,IAAAA,MAAM,CAACY,gBAAP,CAAwB,OAAxB,EAAiCE,iBAAjC;AAEA,WAAO,MAAM;AACX,UAAId,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACe,mBAAP,CAA2B,MAA3B,EAAmCD,iBAAnC;AACAd,QAAAA,MAAM,CAACe,mBAAP,CAA2B,OAA3B,EAAoCD,iBAApC;AACD;AACF,KALD;AAMD,GAxCM,EAyCP,CAACjB,GAAD,CAzCO,CAAT;AA4CA,SAAOC,MAAP;AACD,CAhDD;;AAkDA,eAAeH,SAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useScript = (id, url) => {\n  const [status, setStatus] = useState(url ? \"loading\" : \"idle\");\n\n  useEffect(\n    () => {\n      if(!url) {\n        setStatus(\"idle\");\n        return;\n      }\n\n      let script = document.querySelector(`script[src=\"${url}\"]`);\n      if(!script) {\n        script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.id = id;\n        script.src = url;\n        script.async = true;\n        script.setAttribute(\"data-status\", \"loading\");\n        document.body.appendChild(script);\n\n        const setAttributeFromEvent = (event) => {\n          script.setAttribute(\"data-status\", event.type === \"load\" ? \"ready\" : \"error\");\n        };\n\n        script.addEventListener(\"load\", setAttributeFromEvent);\n        script.addEventListener(\"error\", setAttributeFromEvent);\n      } else {\n        setStatus(script.getAttribute(\"data-status\"));\n      }\n\n      const setStateFromEvent = (event) => {\n        setStatus(event.type === \"load\" ? \"ready\" : \"error\");\n      };\n\n      script.addEventListener(\"load\", setStateFromEvent);\n      script.addEventListener(\"error\", setStateFromEvent);\n\n      return () => {\n        if (script) {\n          script.removeEventListener(\"load\", setStateFromEvent);\n          script.removeEventListener(\"error\", setStateFromEvent);\n        }\n      };\n    },\n    [url]\n  );\n\n  return status;\n};\n\nexport default useScript;"]},"metadata":{},"sourceType":"module"}