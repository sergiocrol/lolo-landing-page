{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport useHeight from '../hooks/useHeight';\n\nvar useInViewport = function useInViewport(outerRef) {\n  _s();\n\n  var _useState = useState(true),\n      inViewport = _useState[0],\n      setInViewport = _useState[1];\n\n  var viewportHeight = useHeight();\n  useEffect(function () {\n    if (viewportHeight > 0) {\n      var _outerRef$current;\n\n      var height = viewportHeight / 2 - (((_outerRef$current = outerRef.current) === null || _outerRef$current === void 0 ? void 0 : _outerRef$current.clientHeight) || viewportHeight - 10) / 2;\n      var rootMargin = \"\".concat(height * -1, \"px 0px \").concat(height * -1, \"px 0px\");\n      var options = {\n        rootMargin: rootMargin,\n        threshold: [0.5]\n      };\n\n      var onChange = function onChange(entries) {\n        entries.forEach(function (entry) {\n          if (entry.target === outerRef.current) {\n            if (entry.isIntersecting) {\n              setInViewport(true);\n            } else {\n              setInViewport(false);\n            }\n          }\n        });\n      };\n\n      var observer = new IntersectionObserver(onChange, options);\n      observer.observe(outerRef.current);\n    }\n  }, [viewportHeight]);\n  return inViewport;\n};\n\n_s(useInViewport, \"9uXSxfIcvN/8rO7IyzvkdMlQeP0=\", false, function () {\n  return [useHeight];\n});\n\nexport default useInViewport;","map":{"version":3,"sources":["/home/scordero/Projects/lolo-landing-page/hooks/useInViewport.js"],"names":["useEffect","useState","useHeight","useInViewport","outerRef","inViewport","setInViewport","viewportHeight","height","current","clientHeight","rootMargin","options","threshold","onChange","entries","forEach","entry","target","isIntersecting","observer","IntersectionObserver","observe"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAc;AAAA;;AAAA,kBACEH,QAAQ,CAAC,IAAD,CADV;AAAA,MAC3BI,UAD2B;AAAA,MACfC,aADe;;AAElC,MAAMC,cAAc,GAAGL,SAAS,EAAhC;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,cAAc,GAAG,CAArB,EAAwB;AAAA;;AACtB,UAAMC,MAAM,GACVD,cAAc,GAAG,CAAjB,GACA,CAAC,sBAAAH,QAAQ,CAACK,OAAT,wEAAkBC,YAAlB,KAAkCH,cAAc,GAAG,EAApD,IAA0D,CAF5D;AAGA,UAAMI,UAAU,aAAMH,MAAM,GAAG,CAAC,CAAhB,oBAA2BA,MAAM,GAAG,CAAC,CAArC,WAAhB;AACA,UAAMI,OAAO,GAAG;AACdD,QAAAA,UAAU,EAAVA,UADc;AAEdE,QAAAA,SAAS,EAAE,CAAC,GAAD;AAFG,OAAhB;;AAKA,UAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,OAAD,EAAa;AAC5BA,QAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,KAAD,EAAW;AACzB,cAAIA,KAAK,CAACC,MAAN,KAAiBd,QAAQ,CAACK,OAA9B,EAAuC;AACrC,gBAAIQ,KAAK,CAACE,cAAV,EAA0B;AACxBb,cAAAA,aAAa,CAAC,IAAD,CAAb;AACD,aAFD,MAEO;AACLA,cAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF;AACF,SARD;AASD,OAVD;;AAWA,UAAMc,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBP,QAAzB,EAAmCF,OAAnC,CAAjB;AACAQ,MAAAA,QAAQ,CAACE,OAAT,CAAiBlB,QAAQ,CAACK,OAA1B;AACD;AACF,GAzBQ,EAyBN,CAACF,cAAD,CAzBM,CAAT;AA2BA,SAAOF,UAAP;AACD,CAhCD;;GAAMF,a;UAEmBD,S;;;AAgCzB,eAAeC,aAAf","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport useHeight from '../hooks/useHeight';\n\nconst useInViewport = (outerRef) => {\n  const [inViewport, setInViewport] = useState(true);\n  const viewportHeight = useHeight();\n\n  useEffect(() => {\n    if (viewportHeight > 0) {\n      const height =\n        viewportHeight / 2 -\n        (outerRef.current?.clientHeight || viewportHeight - 10) / 2;\n      const rootMargin = `${height * -1}px 0px ${height * -1}px 0px`;\n      const options = {\n        rootMargin,\n        threshold: [0.5],\n      };\n\n      const onChange = (entries) => {\n        entries.forEach((entry) => {\n          if (entry.target === outerRef.current) {\n            if (entry.isIntersecting) {\n              setInViewport(true);\n            } else {\n              setInViewport(false);\n            }\n          }\n        });\n      };\n      const observer = new IntersectionObserver(onChange, options);\n      observer.observe(outerRef.current);\n    }\n  }, [viewportHeight]);\n\n  return inViewport;\n}\n\nexport default useInViewport;"]},"metadata":{},"sourceType":"module"}