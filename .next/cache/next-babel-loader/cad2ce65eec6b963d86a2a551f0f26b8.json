{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport useHeight from '../hooks/useHeight';\n\nconst useInViewport = outerRef => {\n  const {\n    0: inViewport,\n    1: setInViewport\n  } = useState(true);\n  const viewportHeight = useHeight();\n  useEffect(() => {\n    if (viewportHeight > 0) {\n      var _outerRef$current;\n\n      const height = viewportHeight / 2 - (((_outerRef$current = outerRef.current) === null || _outerRef$current === void 0 ? void 0 : _outerRef$current.clientHeight) || viewportHeight - 10) / 2;\n      const rootMargin = `${height * -1}px 0px ${height * -1}px 0px`;\n      const options = {\n        rootMargin,\n        threshold: [0.5]\n      };\n\n      const onChange = entries => {\n        entries.forEach(entry => {\n          if (entry.target === outerRef.current) {\n            if (entry.isIntersecting) {\n              setInViewport(true);\n            } else {\n              setInViewport(false);\n            }\n          }\n        });\n      };\n\n      const observer = new IntersectionObserver(onChange, options);\n      observer.observe(outerRef.current);\n    }\n  }, [viewportHeight]);\n  return inViewport;\n};\n\nexport default useInViewport;","map":null,"metadata":{},"sourceType":"module"}