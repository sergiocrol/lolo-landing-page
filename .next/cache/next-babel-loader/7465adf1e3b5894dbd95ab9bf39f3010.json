{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useAnimation } from 'framer-motion';\n\nfunction isInViewport(inViewport, type) {\n  let allDayImage = 0;\n  const controls = useAnimation();\n  const sphereAnimation = useAnimation();\n  if (type === 'allDay') allDayImage++;\n  if (allDayImage === 2) allDayImage = 0;\n  const limpieza = {\n    opacity: 1,\n    right: 70,\n    filter: 'blur(1px)',\n    transition: {\n      duration: 0.2,\n      ease: 'easeInOut',\n      type: 'spring'\n    }\n  };\n  const nocturno = {\n    opacity: 1,\n    right: 45,\n    filter: 'blur(1px)',\n    transition: {\n      duration: 0.2,\n      ease: 'easeInOut'\n    }\n  };\n  const diurno = {\n    opacity: 1,\n    right: 30,\n    filter: 'blur(1px)',\n    transition: {\n      duration: 0.3,\n      ease: 'easeInOut'\n    }\n  };\n  const allDay = {\n    opacity: 1,\n    right: 25,\n    filter: 'blur(2px)',\n    transition: {\n      duration: 0.2,\n      ease: 'easeInOut'\n    }\n  };\n  const sphere = {\n    diurno,\n    nocturno,\n    allDay,\n    limpieza\n  };\n\n  if (inViewport) {\n    controls.start({\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      transition: {\n        duration: 0.5\n      }\n    });\n\n    const anim = async () => {\n      await sphereAnimation.start(_objectSpread({}, sphere[type]));\n      return await sphereAnimation.start({\n        y: [5, 0, 5],\n        transition: {\n          repeat: Infinity,\n          duration: 2\n        }\n      });\n    };\n\n    anim();\n  } else {\n    controls.start({\n      fillOpacity: 0,\n      strokeOpacity: 1,\n      transition: {\n        duration: 0.5\n      }\n    });\n    sphereAnimation.start({\n      opacity: 0,\n      right: 0,\n      transition: {\n        duration: 0.3,\n        ease: 'easeInOut'\n      }\n    });\n  }\n\n  return {\n    controls,\n    sphereAnimation\n  };\n}\n\nexport default isInViewport;","map":null,"metadata":{},"sourceType":"module"}