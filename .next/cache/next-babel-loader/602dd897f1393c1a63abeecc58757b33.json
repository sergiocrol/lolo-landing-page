{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport useHeight from '../hooks/useHeight';\n\nvar useInViewport = function useInViewport(outerRef) {\n  var _useState = useState(true),\n      inViewport = _useState[0],\n      setInViewport = _useState[1];\n\n  var viewportHeight = useHeight();\n  useEffect(function () {\n    if (viewportHeight > 0) {\n      var _outerRef$current;\n\n      var height = viewportHeight / 2 - (((_outerRef$current = outerRef.current) === null || _outerRef$current === void 0 ? void 0 : _outerRef$current.clientHeight) || viewportHeight - 10) / 2;\n      var rootMargin = \"\".concat(height * -1, \"px 0px \").concat(height * -1, \"px 0px\");\n      var options = {\n        rootMargin: rootMargin,\n        threshold: [0.5]\n      };\n\n      var onChange = function onChange(entries) {\n        entries.forEach(function (entry) {\n          if (entry.target === outerRef.current) {\n            if (entry.isIntersecting) {\n              setInViewport(true);\n            } else {\n              setInViewport(false);\n            }\n          }\n        });\n      };\n\n      var observer = new IntersectionObserver(onChange, options);\n      observer.observe(outerRef.current);\n    }\n  }, [viewportHeight]);\n  return inViewport;\n};\n\nexport default useInViewport;","map":null,"metadata":{},"sourceType":"module"}